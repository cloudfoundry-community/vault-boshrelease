<%
  telemetry_enabled = false
  if p("vault.telemetry.statsite_addr", "").empty? == false or p("vault.telemetry.statsd_addr", "").empty? == false
    telemetry_enabled = true
  end
  tls = false
  schema = "http"
  if_p("vault.listener.tcp.tls.certificate", "") do |cert|
    if_p("vault.listener.tcp.tls.key", "") do |key|
      if cert != "" and key != ""
        tls = true
        schema = "https"
      end
    end
  end
  consul_tls = false
  if_p("vault.storage.consul.tls.certificate", "") do |consul_cert|
    if_p("vault.storage.consul.tls.key", "") do |consul_key|
      if consul_cert != "" and consul_key != ""
        consul_tls = true
      end
    end
  end

  port = p("vault.listener.tcp.port")

  # Check configuration for redirect_address property and replace (index) if present, this allows for simplified HA
  # deployments where each node needs a unique address.
  redirect_address = p("vault.ha.redirect_address", "").gsub('(index)', spec.index.to_s)

  # if redirect_address is set use that, otherwise use the ip and port
  redirect_addr = "redirect_addr = \"#{redirect_address.blank? ? "#{schema}://#{spec.ip}:#{port}" : redirect_address }\""

  cluster_port = p("vault.listener.cluster.port")

  # Check configuration for cluster_address property and replace (index) if present, this allows for simplified HA
  # deployments where each node needs a unique address.
  cluster_address = p("vault.ha.cluster_address", "").gsub('(index)', spec.index.to_s)

  # if cluster_address is set use that, otherwise use the ip and cluster_port
  cluster_addr = "cluster_addr = \"#{cluster_address.blank? ? "#{schema}://#{spec.ip}:#{cluster_port}" : cluster_address}\""

  disable_clustering = ""
  if p("vault.ha.disable_clustering", "false") == true
    disable_clustering = "disable_clustering = \"#{p("vault.ha.disable_clustering")}\""
  end
%>
<% if telemetry_enabled %>
telemetry {
  <% if p("vault.telemetry.statsite_addr", "").empty? == false %>statsite_address = "<%= p("vault.telemetry.statsite_addr") %>"<% end %>
  <% if p("vault.telemetry.statsd_addr", "").empty? == false %>statsd_address = "<%= p("vault.telemetry.statsd_addr") %>"<% end %>
  <% if p("vault.telemetry.disable_hostname", "false") == true %>disable_hostname = true<% end %>
}
<% end %>
<% if p("vault.disable_mlock") == true %>disable_mlock = true<% end %>
<% if p("vault.storage.use_consul", "false") == true %>
storage "consul"{
  path = "<%= p("vault.storage.consul.path") %>"
  <% if p("vault.storage.consul.address", "").empty? == false %>address = "<%= p("vault.storage.consul.address") %>"<% end %>
  <% if p("vault.storage.consul.datacenter", "").empty? == false %>datacenter = "<%= p("vault.storage.consul.datacenter") %>"<% end %>
  <% if p("vault.storage.consul.token", "").empty? == false %>token = "<%= p("vault.storage.consul.token") %>"<% end %>
  <% if p("vault.storage.consul.check_timeout", "").empty? == false %>check_timeout = "<%= p("vault.storage.consul.check_timeout") %>"<% end %>
  max_parallel = "<%= p("vault.storage.consul.max_parallel") %>"
  <% if consul_tls %>
  scheme = "https"
    <% if p("vault.storage.consul.tls.skip_verify", "false") == true %>
  tls_skip_verify = "true"
    <% end %>
    <% if p("vault.storage.consul.tls.min_version", "").empty? == false %>tls_min_version = "<%= p("vault.storage.consul.tls.min_version") %>"<% end %>
    tls_ca_file = "/var/vcap/jobs/vault/ssl/consul_ca_certificate.pem"
    tls_cert_file = "/var/vcap/jobs/vault/ssl/consul_certificate.pem"
    tls_key_file  = "/var/vcap/jobs/vault/ssl/consul_key.pem"
  <% end %>
  <%= redirect_addr %>
  <%= cluster_addr %>
  <%= disable_clustering %>
}
<% elsif p("vault.storage.use_file", "false") == true %>
storage "file" {
  path = "<%= p("vault.storage.file.path") %>"
}
<% elsif p("vault.storage.use_s3", "false") == true %>
storage "s3" {
  bucket = "<%= p('vault.storage.s3.bucket') %>"
  access_key = "<%= p('vault.storage.s3.access_key') %>"
  secret_key = "<%= p('vault.storage.s3.secret_key') %>"
  region = "<%= p('vault.storage.s3.region') %>"
  <% if p("vault.storage.s3.endpoint", "").empty? == false %>endpoint = "<%= p('vault.storage.s3.endpoint') %>"<% end %>
  <% if p("vault.storage.s3.session_token", "").empty? == false %>session_token = "<%= p('vault.storage.s3.session_token') %>"<% end %>
  <%= redirect_addr %>
  <%= cluster_addr %>
  <%= disable_clustering %>
}
<% elsif p("vault.storage.use_mysql", "false") == true %>
storage "mysql" {
  address = "<%= p('vault.storage.mysql.address') %>"
  database = "<%= p('vault.storage.mysql.database') %>"
  table = "<%= p('vault.storage.mysql.table') %>"
  username = "<%= p('vault.storage.mysql.username') %>"
  password = "<%= p('vault.storage.mysql.password') %>"
  max_parallel = "<%= p('vault.storage.mysql.max_parallel') %>"

  <% if p("value.storage.mysql.tls.ca_certificate", "").empty? == false %>tls_ca_file = "/var/vcap/jobs/vault/ssl/mysql_ca_certificate.pem"<% end %>
}
<% elsif p("vault.storage.use_inmem", "false") == true %>
storage "inmem" {
}
<% elsif p("vault.storage.use_google_cloud", "false") == true %>
storage "gcs" {
  bucket = "<%= p('vault.storage.google_cloud.bucket') %>"
  credentials_file = "/var/vcap/jobs/vault/data/google-credentials.json"
  <%= disable_clustering %>
}
<% else %>
storage "<%= p("vault.storage.custom.type") %>" {
<% p("vault.storage.custom.options").to_a.each do | k, v | %>
  <%= k %> = "<%= v %>"
<% end %>
}
<% end %>
listener "tcp" {
 address = "<%= p("vault.listener.tcp.address") %>:<%= p("vault.listener.tcp.port") %>"
 <% if !tls %>tls_disable = 1<% end %>
 tls_cert_file = "/var/vcap/jobs/vault/ssl/certificate.pem"
 tls_key_file  = "/var/vcap/jobs/vault/ssl/key.pem"
 tls_min_version = "<%= p("vault.listener.tcp.tls.min_version") %>"
}
