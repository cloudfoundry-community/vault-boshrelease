<%
  telemetry_enabled = false
  if p("vault.statsite_addr", "").empty? == false or p("vault.statsd_addr", "").empty? == false
    telemetry_enabled = true
  end
  tls = false
  schema = "http"
  if_p("vault.listener.tcp.tls.certificate", "") do |cert|
    if_p("vault.listener.tcp.tls.key", "") do |key|
      if cert != "" and key != ""
        tls = true
        schema = "https"
      end
    end
  end
  consul_tls = false
  if_p("vault.backend.consul.tls.certificate", "") do |consul_cert|
    if_p("vault.backend.consul.tls.key", "") do |consul_key|
      if consul_cert != "" and consul_key != ""
        consul_tls = true
      end
    end
  end

  redirect_addr = ""
  cluster_addr = ""
  advertise_addr = ""
  disable_clustering = ""
  unless p("vault.ha.domain","").empty?
    hostname = p("vault.ha.name").gsub('(deployment)', spec.deployment.to_s)
                                 .gsub('(index)',      spec.index.to_s)
    advertise_addr = "advertise_addr = \"#{schema}://#{hostname}.#{p("vault.ha.domain")}:#{p("vault.listener.tcp.port")}\""
  end
  if p("vault.ha.redirect_address", "").empty? == false
    redirect_addr = "redirect_addr = \"#{p("vault.ha.redirect_address")}\""
  else
    port = p("vault.listener.tcp.port")
    redirect_addr = "redirect_addr = \"#{schema}://#{spec.address}:#{port}\""
  end
  if p("vault.ha.cluster_address", "").empty? == false
    cluster_addr = "cluster_addr = \"#{p("vault.ha.cluster_address")}\""
  end
  if p("vault.ha.disable_clustering", "false") == true
    disable_clustering = "disable_clustering = \"#{p("vault.ha.disable_clustering")}\""
  end
%>
<% if telemetry_enabled %>
telemetry {
  <% if p("vault.statsite_addr", "").empty? == false %>statsite_address = "<%= p("vault.statsite_addr") %>"<% end %>
  <% if p("vault.statsd_addr", "").empty? == false %>statsd_address = "<%= p("vault.statsd_addr") %>"<% end %>
}
<% end %>
<% if p("vault.disable_mlock") == true %>disable_mlock = true<% end %>
<% if p("vault.backend.use_consul", "false") == true %>
backend "consul"{
  path = "<%= p("vault.backend.consul.path") %>"
  <% if p("vault.backend.consul.address", "").empty? == false %>address = "<%= p("vault.backend.consul.address") %>"<% end %>
  <% if p("vault.backend.consul.scheme", "").empty? == false %>scheme = "<%= p("vault.backend.consul.scheme") %>"<% end %>
  <% if p("vault.backend.consul.datacenter", "").empty? == false %>datacenter = "<%= p("vault.backend.consul.datacenter") %>"<% end %>
  <% if p("vault.backend.consul.token", "").empty? == false %>token = "<%= p("vault.backend.consul.token") %>"<% end %>
  <% if p("vault.backend.consul.check_timeout", "").empty? == false %>check_timeout = "<%= p("vault.backend.consul.check_timeout") %>"<% end %>
  max_parallel = "<%= p("vault.backend.consul.max_parallel") %>"
  <% if consul_tls %>
    <% if p("vault.backend.consul.tls.skip_verify", "false") == true %>
    tls_skip_verify = "true"
    <% end %>
    <% if p("vault.backend.consul.tls.min_version", "").empty? == false %>tls_min_version = "<%= p("vault.backend.consul.tls.min_version") %>"<% end %>
    tls_ca_file = "/var/vcap/jobs/vault/ssl/ca_certificate.pem"
    tls_cert_file = "/var/vcap/jobs/vault/ssl/consul_certificate.pem"
    tls_key_file  = "/var/vcap/jobs/vault/ssl/consul_key.pem"
  <% end %>
  <%= advertise_addr %>
  <%= redirect_addr %>
  <%= cluster_addr %>
  <%= disable_clustering %>
}
<% elsif p("vault.backend.use_file", "false") == true %>
backend "file" {
  path = "<%= p("vault.backend.file.path") %>"
}
<% elsif p("vault.backend.use_s3", "false") == true %>
backend "s3" {
  bucket = "<%= p('vault.backend.s3.bucket') %>"
  access_key = "<%= p('vault.backend.s3.access_key') %>"
  secret_key = "<%= p('vault.backend.s3.secret_key') %>"
  region = "<%= p('vault.backend.s3.region') %>"
  <% if p("vault.backend.s3.endpoint", "").empty? == false %>endpoint = "<%= p('vault.backend.s3.endpoint') %>"<% end %>
  <% if p("vault.backend.s3.session_token", "").empty? == false %>session_token = "<%= p('vault.backend.s3.session_token') %>"<% end %>
  <%= advertise_addr %>
  <%= redirect_addr %>
  <%= cluster_addr %>
  <%= disable_clustering %>
}
<% else %>
backend "inmem" {
}
<% end %>
listener "tcp" {
 address = "<%= p("vault.listener.tcp.address") %>:<%= p("vault.listener.tcp.port") %>"
 <% if !tls %>tls_disable = 1<% end %>
 tls_cert_file = "/var/vcap/jobs/vault/ssl/certificate.pem"
 tls_key_file  = "/var/vcap/jobs/vault/ssl/key.pem"
 tls_min_version = "<%= p("vault.listener.tcp.tls.min_version") %>"
}
